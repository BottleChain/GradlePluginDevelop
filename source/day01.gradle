
//Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置

//Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写

//Gradle为每个build.gradle都会创建一个相应的Project领域对象，在编写Gradle脚本时，我们实际上是在操作诸如Project这样的Gradle领域对象。


//看了上面专业的术语还是有点懵逼，Gradle 就是一个构建工具，帮助我们构建Android程序，最终生成apk。

//DSL是什么？domain specific language 中文领域专用语言

//领域专用语言是什么？其基本思想是“求专不求全”，不像通用目的语言那样目标范围涵盖一切软件问题，而是专门针对某一特定问题的计算机语言。(不明白？读10遍后，还不明白？看下面)

//DSL 已经存在很久了!。其中一个例子，就是 UNIX 系统中就具有 专属于他自己的小型语言。这当中包括丰富的用于排字用的语言(troff，eqn)，shell 工具(awk， sed)，以及软件开发工具(make，yacc)。

//要构建一种DSL，按最常见的Unix风格的做法，就是先定义它的语法，然后通过代码生成技术把DSL代码转成一种通用语言代码（如C C++ Java等等)，或者写一个这种DSL的解释器。Unix有很多工具能让这件事做起来轻松些。我为这类DSL定了一个术语：“外部DSL”。XML配置文件是外部DSL的另一种常见形式。

//DSL也是Lisp和Smalltalk社群的一项重要传统，但方式不同，他们不是动手新造一套语言，而是让Lisp或Smalltalk这种通用目的语言换个颜面变成DSL。（Paul Graham的文章《自底向上编程》对此有精彩讲述。）利用编程语言自带的语法结构定义出来的DSL，我称之为“内部DSL”，也叫做“内嵌DSL”。

//DSL主要分为三类：外部DSL、内部DSL，以及语言工作台。
//外部DSL是一种“不同于应用系统主要使用语言”的语言。外部DSL通常采用自定义语法，不过选择其他语言的语法也很常见（XML就是一个常见选择）。宿主应用的代码会采用文本解析技术对使用外部DSL编写的脚本进行解析。一些小语言的传统UNIX就符合这种风格。可能经常会遇到的外部DSL的例子包括：正则表达式、SQL、Awk，以及像Struts和Hibernate这样的系统所使用的XML配置文件。
//内部DSL是一种通用语言的特定用法。用内部DSL写成的脚本是一段合法的程序，但是它具有特定的风格，而且只用到了语言的一部分特性，用于处理整个系统一个小方面的问题。用这种DSL写出的程序有一种自定义语言的风格，与其所使用的宿主语言有所区别。这方面最经典的例子是Lisp。Lisp程序员写程序就是创建和使用DSL。Ruby社区也形成了显著的DSL文化：许多Ruby库都呈现出DSL的风格。特别是，Ruby最著名的框架Rails，经常被认为是一套DSL。
//语言工作台是一个专用的IDE，用于定义和构建DSL。具体来说，语言工作台不仅用来确定DSL的语言结构，而且是人们编写DSL脚本的编辑环境。最终的脚本将编辑环境和语言本身紧密结合在一起。

// 领域专用语言详解解释，包括内部DSL和外部DSL https://martinfowler.com/articles/languageWorkbench.html

//
//DSLs实现模型
//实现DSL，主要是针对特定问题域进行动态状态建模，模型可以是任意的：对象模型，结构化模型或者其他的任何实现模型；程序语言通常会很关注语法以及语义，DSLs中的建模主要就是为了建立问题域的描述语义。
//DSLs实现方法
//代码生成(Code-Generation)和解释运行(Interpretation)是DSL的两种实现方式，前者在编译时处理模型，后者在运行时应用模型。
//从实现的角度来讲，前者更加快捷方便，而后者更加精致有效；短期看代码生成可以很快应用，长期看解释运行更能形成效益。

//内部DSL：通用语言的特定用法。内部DSL通常是一段合法的程序，但是具有特定的风格。而且只用到了语言一部分特性。

//总结
//
//   结论1:DSL分两种 ，一种是内部DSL，一种是外部DSL
//   结论2:外部DSL可以灵活的使用自己喜欢的方式去编写，但你必须还要开发一个翻译器，具体能提供的能力受限制与翻译器的能力,比如常用的遵循DTD标准的XML配置,在java项目中使用需要java提供一个翻译xml的工具（比如IntelliJ 可以帮助我们生成代码也是一种DSL）
//   结论3:内部DSL写成的脚本是一段合法的程序，但是它具有特定的风格，而且只用到了语言的一部分特性，用于处理整个系统一个小方面的问题。用这种DSL写出的程序有一种自定义语言的风格，与其所使用的宿主语言有所区别。
//   结论4:Gradle是一个基于JVM的构建工具,它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置
//   结论5:Groovy 的 闭包、元编程 、MOP特性决定了可以创建各种DSL
